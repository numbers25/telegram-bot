generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model BookOption {
  id            Int      @id @default(autoincrement())
  poll          Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId        Int
  author        String
  title         String
  suggestedBy   User?    @relation(fields: [suggestedById], references: [id])
  suggestedById Int?
  createdAt     DateTime @default(now())
  currentRead   Boolean  @default(false)
  votes         Vote[]

  @@unique([pollId, suggestedById]) // each book appears only once per poll
  @@index([pollId, currentRead])
}

model Chat {
  id             Int      @id @default(autoincrement())
  telegramChatId String   @unique // the raw chat ID from Telegram
  title          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  polls          Poll[]
  users          User[]
}

model User {
  id             Int          @id @default(autoincrement())
  telegramUserId String       @unique // the raw user ID from Telegram
  username       String?
  firstName      String?
  lastName       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  votes          Vote[]
  suggestions    BookOption[]
  chats          Chat[]
}

model Poll {
  id        Int          @id @default(autoincrement())
  chat      Chat         @relation(fields: [chatId], references: [id])
  chatId    Int
  title     String?
  startDate DateTime
  endDate   DateTime
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  options   BookOption[]

  @@index([chatId, isActive])
}

model Vote {
  id        Int        @id @default(autoincrement())
  option    BookOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId  Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime   @default(now())

  @@unique([optionId, userId]) // one vote per user per option
}
